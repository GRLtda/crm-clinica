import apiClient from './index'

// --- FunÃ§Ãµes de ConexÃ£o WhatsApp (existentes) ---
export const initiateWhatsAppConnection = () => {
  return apiClient.get('/crm/qrcode')
}

export const checkWhatsAppStatus = () => {
  return apiClient.get('/crm/status')
}

export const logoutWhatsAppConnection = () => {
  return apiClient.post('/crm/logout')
}

// --- ðŸš€ NOVAS FunÃ§Ãµes para Modelos de Mensagem ---

/**
 * Lista todos os modelos de mensagem da clÃ­nica.
 * Rota: GET /api/crm/templates
 */
export const listMessageTemplates = () => {
  return apiClient.get('/crm/templates')
}

/**
 * Cria um novo modelo de mensagem.
 * Rota: POST /api/crm/templates
 * @param {object} templateData - Dados do modelo { name, content, tags? }.
 */
export const createMessageTemplate = (templateData) => {
  return apiClient.post('/crm/templates', templateData)
}

/**
 * Busca um modelo de mensagem especÃ­fico por ID.
 * Rota: GET /api/crm/templates/:id
 * @param {string} templateId - O ID do modelo.
 */
export const getMessageTemplateById = (templateId) => {
  return apiClient.get(`/crm/templates/${templateId}`)
}

/**
 * Atualiza um modelo de mensagem existente.
 * Rota: PUT /api/crm/templates/:id
 * @param {string} templateId - O ID do modelo.
 * @param {object} templateData - Dados a serem atualizados { name?, content?, tags? }.
 */
export const updateMessageTemplate = (templateId, templateData) => {
  return apiClient.put(`/crm/templates/${templateId}`, templateData)
}

/**
 * Deleta um modelo de mensagem.
 * Rota: DELETE /api/crm/templates/:id
 * @param {string} templateId - O ID do modelo.
 */
export const deleteMessageTemplate = (templateId) => {
  return apiClient.delete(`/crm/templates/${templateId}`)
}

/**
 * Busca a lista de variÃ¡veis suportadas (opcional).
 * Rota: GET /api/crm/templates/variables
 */
export const getTemplateVariables = () => {
  return apiClient.get('/crm/templates/variables')
}

/**
 * ObtÃ©m os tipos de gatilhos de mensagem disponÃ­veis.
 * Rota: GET /api/crm/settings/types
 */
export const getAvailableMessageTypes = () => {
  return apiClient.get('/crm/settings/types')
}

/**
 * Cria ou atualiza uma configuraÃ§Ã£o de gatilho de mensagem (Upsert).
 * Rota: POST /api/crm/settings
 * @param {object} settingData - Dados da configuraÃ§Ã£o { type, templateId, isActive? }.
 */
export const upsertMessageSetting = (settingData) => {
  return apiClient.post('/crm/settings', settingData)
}

/**
 * Lista todas as configuraÃ§Ãµes de gatilho salvas para a clÃ­nica.
 * Rota: GET /api/crm/settings
 */
export const listMessageSettings = () => {
  return apiClient.get('/crm/settings')
}

/**
 * Exclui uma configuraÃ§Ã£o de gatilho especÃ­fica.
 * Rota: DELETE /api/crm/settings/:type
 * @param {string} messageType - O tipo de gatilho a ser excluÃ­do (ex: "APPOINTMENT_1_DAY_BEFORE").
 */
export const deleteMessageSetting = (messageType) => {
  // O tipo vai na URL, entÃ£o precisamos formatar a string
  return apiClient.delete(`/crm/settings/${encodeURIComponent(messageType)}`)
}

// --- ðŸš€ NOVAS FunÃ§Ãµes para Logs de Mensagens ---

/**
 * ObtÃ©m os status e tipos de aÃ§Ã£o disponÃ­veis para filtros de log.
 * Rota: GET /api/crm/logs/status
 */
export const getLogFiltersOptions = () => {
  return apiClient.get('/crm/logs/status')
}

/**
 * Lista os logs de mensagens com filtros e paginaÃ§Ã£o.
 * Rota: GET /api/crm/logs
 * @param {object} params - ParÃ¢metros de query (limit, page, status, patientId, actionType).
 */
export const listMessageLogs = (params = {}) => {
  // Garante que apenas parÃ¢metros definidos sejam enviados
  const validParams = Object.entries(params).reduce((acc, [key, value]) => {
    if (value !== null && value !== undefined && value !== '') {
      acc[key] = value;
    }
    return acc;
  }, {});
  return apiClient.get('/crm/logs', { params: validParams })
}
